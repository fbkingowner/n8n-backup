{
  "active": false,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate ideas": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Generate Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Получаем ссылку IMGBB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получаем ссылку IMGBB1": {
      "main": [
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Google Sheets4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets4": {
      "main": [
        [
          {
            "node": "Empty link image?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Generate Content",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Parser Idea": {
      "ai_outputParser": [
        [
          {
            "node": "Generate ideas",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Parser Content": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Content",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Empty link image?": {
      "main": [
        [
          {
            "node": "Edit1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty link image?1": {
      "main": [
        [
          {
            "node": "Generate ideas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet2": {
      "main": [
        [
          {
            "node": "Empty link image?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet1": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Update row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate ideas",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-06T08:29:31.410Z",
  "id": "KsUmIuBVSRUiAoXs",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "NEW_Content_All_in1",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1460,
        -560
      ],
      "id": "977d0d77-c4a2-4504-beda-bdf0f2ad53bb",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Сгенерируй идею для рубрики \"{{ $('Loop Over Items').item.json['Категории постов:'] }}\" со следующими характеристиками: {{ $('Loop Over Items').item.json['Категории постов:'] }}\nСтиль подачи: {{ $('Loop Over Items').item.json['Стиль подачи'] }}\nСпецифика: {{ $('Loop Over Items').item.json['Специфика'] }}\nЦелевая аудитория: {{ $('Loop Over Items').item.json['Целевая аудитория'] }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**Role**: \nВы - эксперт по покеру с 15+ летним опытом игры на профессиональном уровне, который генерирует вирусные и ценные идеи для телеграм-канала о покере. Вы следите за трендами покерного мира и понимаете, что интересно аудитории.\n\nПРАВИЛА:\nВозвращайте только 1 идею за раз\nПользователь предоставит тип рубрики и её специфику\n\n\nИдея должна быть:\n- Практичной и применимой\n- Интересной для широкой аудитории (от новичков до продвинутых)\n- Актуальной и соответствовать текущим трендам в покере\n- Уникальной и не банальной\n\n\nТема должна быть:\n- Конкретной и понятной\n- Под 10 слов\n- Привлекательной для клика\n\n\nОписание должно быть:\n- Под 25 слов\n- Объяснять суть идеи\n- Показывать практическую ценность\n- Содержать ключевые моменты для контент-агента\n\nOUTPUT FORMAT (single-line JSON array):\n[\n  {\n  \"topic\": \"Конкретная тема для поста\",\n  \"description\": \"Краткое описание идеи с ключевыми моментами\"\n  }\n]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -260,
        -680
      ],
      "id": "fcd85821-0308-4ad9-af4c-bad982bcc208",
      "name": "Generate ideas",
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E",
          "mode": "list",
          "cachedResultName": "Контент // 4Poker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json['Категории постов:'] }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Тема": "={{ $json.output.topic }}",
            "Краткое описание темы": "={{ $json.output.description }}",
            "row_number": "={{ $('Google Sheets4').item.json.row_number }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Итоговый пост",
              "displayName": "Итоговый пост",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Заголовок для картинки",
              "displayName": "Заголовок для картинки",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Картинка",
              "displayName": "Картинка",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Тема",
              "displayName": "Тема",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Краткое описание темы",
              "displayName": "Краткое описание темы",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        180,
        -680
      ],
      "id": "81a0be87-f60d-4564-a84f-c56727f298d1",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SVgQi4tJWBnpD656",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Создай пост для рубрики \"{{ $('Loop Over Items').item.json['Категории постов:'] }}\" на основе следующих данных:\nТема: {{ $json['Тема'] }}\nОписание: {{ $json['Краткое описание темы'] }}\nКоличество символов: {{ $('Loop Over Items').item.json['Кол-во символов'] }}\nЦелевая аудитория: {{ $('Loop Over Items').item.json['Целевая аудитория'] }}\n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**Role**\nYou are an elite copywriter for a poker Telegram channel with 15+ years of professional-level playing experience. You create viral and valuable posts that give readers a real advantage in the game. You deeply understand poker psychology, probability mathematics, modern strategies and micro/macro game management, you understand GTO and exploitative strategy.\n\n**RULES**\n- Create only 1 post at a time\n- Strictly adhere to the specified character count (±50 characters)\n- Use the specified tone and adapt to the target audience\n- Follow the given post structure\n- Determine the level of poker terminology based on the target audience: {{ $('Loop Over Items').item.json['Целевая аудитория'] }}\n- Don't use hashtags\n- Use natural conversational language\n- Write a ready post without introductory phrases\n\n**FORMATTING:**\n- Always highlight the title: <b>Post Title</b>\n- Highlight important text sections with <b>...</b> tags\n- Add emojis at the beginning of paragraphs where it makes sense\n- Separate text into paragraphs with actual spaces\n- DO NOT use other HTML tags except <b>\n\n**IMAGE TITLE:**\n- Maximum 5 words\n- Reflects the essence of the post\n- Attracts attention (clickbait-worthy)\n- Can differ from the post title\n- Without emojis and formatting\n\nOUTPUT FORMAT (single-line JSON object, no array!):\n[\n  {\n  \"post\": \"Итоговый пост с HTML форматированием\",\n  \"image_title\": \"Заголовок для картинки\"\n  }\n]\n\n**IMPORTANT:** All content must be written in Russian language, including the post text and image title.\n\nUse the Think tool to review your output"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        520,
        -680
      ],
      "id": "a73bd0b2-86a4-46ce-8fa7-69da3273fc4c",
      "name": "Generate Content",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "={{ $json.selectedTemplate }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2500,
        -1140
      ],
      "id": "2094dd70-abd0-41b1-8098-afff915f1e23",
      "name": "Execute Command1",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "maxTries": 5,
      "waitBetweenTries": 500,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7a0ea773-2356-4f4c-a12c-f56d1078090c",
              "name": "HTML1",
              "value": "=cat > /tmp/render-banner.js <<'EOF'\nconst puppeteer = require('puppeteer');\n\nconst html = `<!DOCTYPE html>\n<html lang='ru'>\n  <head>\n    <meta charset='UTF-8' />\n    <link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap' rel='stylesheet'>\n    <style>\n      html, body { margin: 0; padding: 0; }\n      .banner {\n        position: relative;\n        width: 1200px; \n        height: 630px;\n        background-image: url('https://i.ibb.co/KjH7tTvP/Chat-GPT-Image-30-2025-16-55-34.png');\n        background-size: cover;\n        background-position: center;\n        font-family: 'Montserrat', sans-serif;\n      }\n      .safe-area {\n        position: absolute;\n        top: 100px; \n        left: 10px;\n        width: 700px; \n        height: 330px;\n        padding: 20px; box-sizing: border-box;\n        display: flex; align-items: center; justify-content: center;\n      }\n      .text {\n        color: white; font-weight: 900;\n        text-align: center;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.7);\n        display: inline-block;\n        width: 100%;\n        line-height: 1.1;\n        word-break: normal;\n        white-space: normal;\n      }\n    </style>\n  </head>\n  <body>\n    <div class='banner'>\n      <div class='safe-area'>\n        <div class='text' id='text'>\n          {{ $json.Text }} \n        </div>\n      </div>\n    </div>\n    <script>\n      function fitText(elId, min = 10, max = 200) {\n        const el = document.getElementById(elId);\n        const container = el.parentElement;\n        let fontSize = min;\n        el.style.fontSize = fontSize + 'px';\n        while (el.scrollHeight <= container.clientHeight &&\n               el.scrollWidth <= container.clientWidth &&\n               fontSize < max) {\n          fontSize++;\n          el.style.fontSize = fontSize + 'px';\n        }\n        if (el.scrollHeight > container.clientHeight ||\n            el.scrollWidth > container.clientWidth) {\n          fontSize--;\n          el.style.fontSize = fontSize + 'px';\n        }\n      }\n      window.addEventListener('load', () => fitText('text'));\n    </script>\n  </body>\n</html>`;\n\n(async () => {\n  const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1200, height: 630 });\n  const dataUri = 'data:text/html;charset=utf-8,' + encodeURIComponent(html);\n  await page.goto(dataUri, { waitUntil: 'networkidle0' });\n  const buffer = await page.screenshot({ type: 'jpeg' }); \n  await browser.close(); \n\n  console.log(buffer.toString('base64'));\n})();\nEOF\n\nnode /tmp/render-banner.js\n",
              "type": "string"
            },
            {
              "id": "e42f284c-7ec9-4e6e-a71b-e7cee351dcbb",
              "name": "HTML2",
              "value": "=cat > /tmp/render-banner.js <<'EOF'\nconst puppeteer = require('puppeteer');\n\nconst html = `<!DOCTYPE html>\n<html lang='ru'>\n  <head>\n    <meta charset='UTF-8' />\n    <link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap' rel='stylesheet'>\n    <style>\n      html, body { margin: 0; padding: 0; }\n      .banner {\n        position: relative;\n        width: 1200px; \n        height: 630px;\n        background-image: url('https://i.ibb.co/0825Lqw/Chat-GPT-Image-1-2025-22-05-04.png');\n        background-size: cover;\n        background-position: center;\n        font-family: 'Montserrat', sans-serif;\n      }\n      .safe-area {\n        position: absolute;\n        top: 100px; \n        left: 225px;\n        width: 700px; \n        height: 330px;\n        padding: 20px; box-sizing: border-box;\n        display: flex; align-items: center; justify-content: center;\n      }\n      .text {\n        color: white; font-weight: 900;\n        text-align: center;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.7);\n        display: inline-block;\n        width: 100%;\n        line-height: 1.1;\n        word-break: normal;\n        white-space: normal;\n      }\n    </style>\n  </head>\n  <body>\n    <div class='banner'>\n      <div class='safe-area'>\n        <div class='text' id='text'>\n          {{ $json.Text }} \n        </div>\n      </div>\n    </div>\n    <script>\n      function fitText(elId, min = 10, max = 200) {\n        const el = document.getElementById(elId);\n        const container = el.parentElement;\n        let fontSize = min;\n        el.style.fontSize = fontSize + 'px';\n        while (el.scrollHeight <= container.clientHeight &&\n               el.scrollWidth <= container.clientWidth &&\n               fontSize < max) {\n          fontSize++;\n          el.style.fontSize = fontSize + 'px';\n        }\n        if (el.scrollHeight > container.clientHeight ||\n            el.scrollWidth > container.clientWidth) {\n          fontSize--;\n          el.style.fontSize = fontSize + 'px';\n        }\n      }\n      window.addEventListener('load', () => fitText('text'));\n    </script>\n  </body>\n</html>`;\n\n(async () => {\n  const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1200, height: 630 });\n  const dataUri = 'data:text/html;charset=utf-8,' + encodeURIComponent(html);\n  await page.goto(dataUri, { waitUntil: 'networkidle0' });\n  const buffer = await page.screenshot({ type: 'jpeg' }); \n  await browser.close(); \n\n  console.log(buffer.toString('base64'));\n})();\nEOF\n\nnode /tmp/render-banner.js\n",
              "type": "string"
            },
            {
              "id": "48163287-4108-44c0-8cc3-08b8706ee4f0",
              "name": "HTML3",
              "value": "=cat > /tmp/render-banner.js <<'EOF'\nconst puppeteer = require('puppeteer');\n\nconst html = `<!DOCTYPE html>\n<html lang='ru'>\n  <head>\n    <meta charset='UTF-8' />\n    <link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap' rel='stylesheet'>\n    <style>\n      html, body { margin: 0; padding: 0; }\n      .banner {\n        position: relative;\n        width: 1200px; \n        height: 630px;\n        background-image: url('https://i.ibb.co/xKts7Pmf/Chat-GPT-Image-1-2025-22-01-27.png');\n        background-size: cover;\n        background-position: center;\n        font-family: 'Montserrat', sans-serif;\n      }\n      .safe-area {\n        position: absolute;\n        top: 100px; \n        left: 225px;\n        width: 700px; \n        height: 330px;\n        padding: 20px; box-sizing: border-box;\n        display: flex; align-items: center; justify-content: center;\n      }\n      .text {\n        color: white; font-weight: 900;\n        text-align: center;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.7);\n        display: inline-block;\n        width: 100%;\n        line-height: 1.1;\n        word-break: normal;\n        white-space: normal;\n      }\n    </style>\n  </head>\n  <body>\n    <div class='banner'>\n      <div class='safe-area'>\n        <div class='text' id='text'>\n          {{ $json.Text }} \n        </div>\n      </div>\n    </div>\n    <script>\n      function fitText(elId, min = 10, max = 200) {\n        const el = document.getElementById(elId);\n        const container = el.parentElement;\n        let fontSize = min;\n        el.style.fontSize = fontSize + 'px';\n        while (el.scrollHeight <= container.clientHeight &&\n               el.scrollWidth <= container.clientWidth &&\n               fontSize < max) {\n          fontSize++;\n          el.style.fontSize = fontSize + 'px';\n        }\n        if (el.scrollHeight > container.clientHeight ||\n            el.scrollWidth > container.clientWidth) {\n          fontSize--;\n          el.style.fontSize = fontSize + 'px';\n        }\n      }\n      window.addEventListener('load', () => fitText('text'));\n    </script>\n  </body>\n</html>`;\n\n(async () => {\n  const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1200, height: 630 });\n  const dataUri = 'data:text/html;charset=utf-8,' + encodeURIComponent(html);\n  await page.goto(dataUri, { waitUntil: 'networkidle0' });\n  const buffer = await page.screenshot({ type: 'jpeg' }); \n  await browser.close(); \n\n  console.log(buffer.toString('base64'));\n})();\nEOF\n\nnode /tmp/render-banner.js\n",
              "type": "string"
            },
            {
              "id": "3e6aa1ff-634c-4289-93ca-b68da99b4ac3",
              "name": "HTML4",
              "value": "=cat > /tmp/render-banner.js <<'EOF'\nconst puppeteer = require('puppeteer');\n\nconst html = `<!DOCTYPE html>\n<html lang='ru'>\n  <head>\n    <meta charset='UTF-8' />\n    <link href='https://fonts.googleapis.com/css2?family=Montserrat:wght@900&display=swap' rel='stylesheet'>\n    <style>\n      html, body { margin: 0; padding: 0; }\n      .banner {\n        position: relative;\n        width: 1200px; \n        height: 630px;\n        background-image: url('https://i.ibb.co/0RLmLzMH/Chat-GPT-Image-2-2025-10-42-08.png');\n        background-size: cover;\n        background-position: center;\n        font-family: 'Montserrat', sans-serif;\n      }\n      .safe-area {\n        position: absolute;\n        top: 100px; \n        left: 225px;\n        width: 700px; \n        height: 330px;\n        padding: 20px; box-sizing: border-box;\n        display: flex; align-items: center; justify-content: center;\n      }\n      .text {\n        color: white; font-weight: 900;\n        text-align: center;\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.7);\n        display: inline-block;\n        width: 100%;\n        line-height: 1.1;\n        word-break: normal;\n        white-space: normal;\n      }\n    </style>\n  </head>\n  <body>\n    <div class='banner'>\n      <div class='safe-area'>\n        <div class='text' id='text'>\n          {{ $json.Text }} \n        </div>\n      </div>\n    </div>\n    <script>\n      function fitText(elId, min = 10, max = 200) {\n        const el = document.getElementById(elId);\n        const container = el.parentElement;\n        let fontSize = min;\n        el.style.fontSize = fontSize + 'px';\n        while (el.scrollHeight <= container.clientHeight &&\n               el.scrollWidth <= container.clientWidth &&\n               fontSize < max) {\n          fontSize++;\n          el.style.fontSize = fontSize + 'px';\n        }\n        if (el.scrollHeight > container.clientHeight ||\n            el.scrollWidth > container.clientWidth) {\n          fontSize--;\n          el.style.fontSize = fontSize + 'px';\n        }\n      }\n      window.addEventListener('load', () => fitText('text'));\n    </script>\n  </body>\n</html>`;\n\n(async () => {\n  const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox'] });\n  const page = await browser.newPage();\n  await page.setViewport({ width: 1200, height: 630 });\n  const dataUri = 'data:text/html;charset=utf-8,' + encodeURIComponent(html);\n  await page.goto(dataUri, { waitUntil: 'networkidle0' });\n  const buffer = await page.screenshot({ type: 'jpeg' }); \n  await browser.close(); \n\n  console.log(buffer.toString('base64'));\n})();\nEOF\n\nnode /tmp/render-banner.js\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2060,
        -1140
      ],
      "id": "cc0e5770-f201-41af-b57d-948b3fb590e3",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "stdout",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2720,
        -1140
      ],
      "id": "ef331c1b-9314-4da6-af3c-557ac3888009",
      "name": "Convert to File1",
      "retryOnFail": true,
      "maxTries": 2,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.imgbb.com/1/upload?key=8eab1369fa5f6be053179a6deacb7667",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "=image",
              "value": "={{ $('Execute Command1').item.json.stdout }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2940,
        -1140
      ],
      "id": "21b9b9a1-f046-4056-b4e8-83a05e0d03af",
      "name": "Получаем ссылку IMGBB1",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const htmlKeys = Object.keys(item.json).filter(k => k.startsWith(\"HTML\"));\n  const randomKey = htmlKeys[Math.floor(Math.random() * htmlKeys.length)];\n  const htmlCode = item.json[randomKey];\n\n  return {\n    json: {\n      selectedTemplate: htmlCode,\n      Text: item.json.Text // Сохраняем, если нужно для отладки\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2280,
        -1140
      ],
      "id": "e65969c1-642b-4695-a6d8-3a57d7343192",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7a0ea773-2356-4f4c-a12c-f56d1078090c",
              "name": "Text",
              "value": "={{ $json['Заголовок для картинки'].toUpperCase() }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        -1140
      ],
      "id": "8b0f811f-9a54-4486-912c-9a185911286f",
      "name": "Edit1"
    },
    {
      "parameters": {
        "content": "## Генерируем идею и сам пост\n",
        "height": 540,
        "width": 2480
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1240,
        -720
      ],
      "typeVersion": 1,
      "id": "9ec9867b-4a8d-4f43-afea-fe255e946a7d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Генерируем изображение для готового поста",
        "height": 360,
        "width": 1780
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1500,
        -1240
      ],
      "typeVersion": 1,
      "id": "c24c5e0c-80d3-4eb8-a4b6-26dc82350664",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1020,
        -560
      ],
      "id": "6a339eb7-a62a-4381-b052-e4d6bfabb45b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E",
          "mode": "list",
          "cachedResultName": "Контент // 4Poker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $json['Категории постов:'] }}",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -760,
        -520
      ],
      "id": "71080a0a-504f-4f8f-97a7-227fed5f784e",
      "name": "Google Sheets4",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SVgQi4tJWBnpD656",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -320,
        -180
      ],
      "id": "85e5dc23-f05a-43c5-8e7f-4a27a749f9e7",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "ITOcGV4KImsLZW3S",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "description": "=Think carefully about which parts of the text truly require emojis and which do not. Do not insert emojis everywhere by default. Decide which words or phrases should be highlighted using <b>...</b> tags to make the text more expressive and professional. Strictly follow the specified character limit."
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        260,
        -360
      ],
      "id": "48bcaeca-7656-4d99-b3bf-13247e6c679c",
      "name": "Think"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"topic\": \"Конкретная тема для поста\",\n  \"description\": \"Краткое описание идеи с ключевыми моментами\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -80,
        -380
      ],
      "id": "5fa0beda-bf70-4cae-8eb9-6717aed38314",
      "name": "Parser Idea"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"post\": \"Итоговый пост с HTML форматированием\",\n  \"image_title\": \"Заголовок для картинки\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        800,
        -340
      ],
      "id": "5e8f43fa-2d7f-4283-b00c-ecd201a2bab1",
      "name": "Parser Content"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5f389553-5d23-4bce-9e0a-7b14d87ae1a9",
              "leftValue": "={{ $json['Картинка'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1620,
        -1140
      ],
      "id": "fd44e70c-8ab1-4819-8a10-84e5c05856b1",
      "name": "Empty link image?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5f389553-5d23-4bce-9e0a-7b14d87ae1a9",
              "leftValue": "={{ $json['Итоговый пост'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -500,
        -520
      ],
      "id": "e5309b20-7d29-44cc-88db-05c80265e9a5",
      "name": "Empty link image?1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E",
          "mode": "list",
          "cachedResultName": "Контент // 4Poker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1360027198,
          "mode": "list",
          "cachedResultName": "!Категории",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E/edit#gid=1360027198"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1240,
        -560
      ],
      "id": "c8fa8a8c-5d51-4604-94c7-c714bb1af519",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SVgQi4tJWBnpD656",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b9ff8940-b6cb-43a8-92a0-4cd9e22d1b48",
              "name": "User",
              "value": "=Give me an idea about\n\n[[a random hard material or element being sliced with sharp knife - have your idea be in this format: \"{color}(material) shaped like a (random object)\". Examples for your inspiration: glass shaped like a strawberry, crystal shaped like a bear, dry ice shaped a snowflake, diamond shaped like a hat, etc.\n]]\n\nUse the Think tool to review your output",
              "type": "string"
            },
            {
              "id": "4ebc010e-7dcf-4fc1-9801-bb4bb269c925",
              "name": "System",
              "value": "=**Role**: You are an AI designed to generate 1 immersive, realistic idea based on a user-provied topic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\n***\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"Glass cutting ASMR,\" \"wood carving sounds\", \"satisfying rock splits\").\n\nThe Idea must\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic\n\nCan be as surreal as you can get, doesn't have to be real-world!\n\nThe Caption must be:\n\nShort, punchy, and viral-friendly.\n\nInclude one relevant omoji.\n\nInclude exactly 1? hashtags in this order:\n•* 4 topic-relevant hashtags\n** 4 all-time nost popular hashtags\n•* 4 currently trending hashtags (based on live research)\n\nAll hashtags must be lowercase.\n\nSet Status to * a npoiiecce\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere Ihe event is happening (e.g. clean studio table, rough natural terrain, laboratory bench)\n\nKey visuals or background details (e.g. dust particles, polished surface, subtle light reflections)\n\nStyle of scene (e.g. macro close-up, cinematic slow-motiun. minimalist, abstract) dk with fictional settings.\n\nThe Sound must:\n\nBe under lb words.\n\nDescribe the primary sound that makes sense to happen in the video. This will be fed to a sound model later on.\n\n***\nOUTPUT FORMAT (single-line JSON array):\n\n[\n{\n    \"Caption\": \"Short viral title with emoji *4.topic.hashtags »4_all.time.popular,hashtags M.trending.hashtags\",\n    \"Idea\": \"Short idea under 13 words\",\n    \"Описание\": \"Brief vivid setting unde' 20 words matching the action\",\n    \"Sound”: \"Primary sound description unde** 15 wo'ds\",\n    \"Status\": 'for production\"\n  }\n]\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        -900
      ],
      "id": "e0dfd7d0-2150-483c-b95f-089663607d6e",
      "name": "Generate Ideas ASMP"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b9ff8940-b6cb-43a8-92a0-4cd9e22d1b48",
              "name": "User",
              "value": "=Give me 3 video promts based on the previous idea\n\nUse the Think Tool to review your output",
              "type": "string"
            },
            {
              "id": "4ebc010e-7dcf-4fc1-9801-bb4bb269c925",
              "name": "System",
              "value": "=Role: You are a prompt-generation AI specializing in cinematic, ASMR-style video prompts.\nYour task is to generate a multi-scene video sequence that vividly shows a sharp knife\nactively cutting through a specific object in a clean, high-detail setting.\n\nYour writing must follow this style:\n\nSharp, precise cinematic realism.\n\nMacro-level detail with tight focus on the blade interacting with the object.\n\nThe knife must always be in motion - slicing, splitting, or gliding through the material.\nNever idle or static.\n\nCamera terms are allowed (e.g. macro view, tight angle, over-the-blade shot).\n\nEach scene must contain all of the following, expressed through detailed visual language:\n\n- The main object or subject (from the Idea)\n\n- The cutting environment or surface (from the Environment)\n\n- The texture, structure, and behavior of the material as it’s being cut\n\n- A visible, sharp blade actively cutting\n\nDescriptions should show:\n\nThe physical makeup of the material - is it translucent, brittle, dense, reflective,\ngranular, fibrous, layered, or fluid-filled?\n\nHow the material responds to the blade - resistance, cracking, tearing, smooth separation,\ntension, vibration.\n\nThe interaction between the blade and the surface - light reflection, buildup of particles,\ncontact points, residue or dust.\n\nAny ASMR-relevant sensory cues like particle release, shimmer, or subtle movement, but\nalways shown visually - not narrated.\n\nTone:\n\nClean, clinical, visual.\n\nNo poetic metaphors, emotion, or storytelling.\n\nAvoid fantasy or surreal imagery.\n\nAll description must feel physically grounded and logically accurate.\n\nLength:\nEach scene must be between 1,000 and 2,000 characters.\nNo shallow or repetitive scenes - each must be immersive, descriptive, and specific.\nEach scene should explore a distinct phase of the cutting process, a different camera\nperspective, or a new behavior of the material under the blade.\n\nInputs:\nIdea: \"{{ $json.IDEA }}\"\nEnvironment: \"{{ $json.Prompt.Video }}\"\nSound: \"{{ $json.Prompt_sound }}\"\n\nFormat:\n\nIdea:\nEnvironment\nSound: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        -920
      ],
      "id": "4b16c447-4eab-42b5-b90b-98c9c5d983c7",
      "name": "Generate Content ASMP"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        3360,
        -80
      ],
      "id": "c9bf649e-6035-499b-acd5-7326faea742b"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E",
          "mode": "list",
          "cachedResultName": "Контент // 4Poker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').first().json['Категории постов:'] }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Тема": "=",
            "Краткое описание темы": "=",
            "row_number": "={{ $('Update row in sheet').item.json.row_number }}",
            "Заголовок для картинки": "={{ $json.image_title }}",
            "Итоговый пост": "={{ $json.post }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Итоговый пост",
              "displayName": "Итоговый пост",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Заголовок для картинки",
              "displayName": "Заголовок для картинки",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Картинка",
              "displayName": "Картинка",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Тема",
              "displayName": "Тема",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Краткое описание темы",
              "displayName": "Краткое описание темы",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1040,
        -680
      ],
      "id": "8e60923c-248b-4cc2-bac9-29b3658adf82",
      "name": "Update row in sheet2",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SVgQi4tJWBnpD656",
          "name": "Google Sheets account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E",
          "mode": "list",
          "cachedResultName": "Контент тестовый",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BANxMibwyT4rAO0QEzo4FsaQzfneIlEqrxHrJzvmV5E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Loop Over Items').item.json['Категории постов:'] }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $('Google Sheets4').item.json.row_number }}",
            "Текст": "=",
            "Картинка": "={{ $json.data.url }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Текст",
              "displayName": "Текст",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Картинка",
              "displayName": "Картинка",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Тема",
              "displayName": "Тема",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3120,
        -1140
      ],
      "id": "0b4fef6a-c4b4-43d7-885e-bfb36aa6af32",
      "name": "Update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SVgQi4tJWBnpD656",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        700,
        -160
      ],
      "id": "6bd309bd-7912-475d-8df8-dd6a93238754",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "ITOcGV4KImsLZW3S",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const post = item.json.output.post;\n  const imageTitle = item.json.output.image_title;\n\n  // Добавляем подпись\n  const finalPost = post + '\\n\\n<a href=\"t.me/four_poker\">4Poker | Все о покере </a>';\n\n  return {\n    json: {\n      post: finalPost,\n      image_title: imageTitle\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        840,
        -680
      ],
      "id": "a38c32fc-7734-4978-8542-58979e7efb07",
      "name": "Code",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -280,
        -320
      ],
      "id": "ddade55d-a177-4b82-9bba-d3beb2c510e3",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "GcW1q7gQjbQDtBqk",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        520,
        -320
      ],
      "id": "d5ca50aa-32c8-45d2-b772-a8442d915b1e",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "GcW1q7gQjbQDtBqk",
          "name": "OpenAi account 2"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "fbkingowner",
    "name": "n8n-backup"
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-08T14:31:17.379Z",
  "versionId": "691e357a-5d26-42f1-bf31-e10c07fe50f9"
}